/* Mixins are the second file to be loaded into main.scss. these should be declared after variables, since they also will be used throughout.*/

//get variables
@import "variables";
/////////// @mixins /////////

//Used to reset padding and margins for components.
//I have used this to do a complete overide before adding new margins and padding.
//I should extend it with arguments and options to allow this.
@mixin margin-padding{
  margin:0;
  padding:0;
}

//also used throughout as a major thematic choice.
//I will expand on this to allow arguments for colours and padding.
@mixin highlight-text {
  padding:0;
  background:$cyan;
  width:-moz-fit-content;
  width:fit-content;
  color:$base03;
  font-weight: bold;
}
//Used mainly for the forms
//in the spirit of DRY (and weird sass inherience)
//I have used it as a @mixin. It could also be used throughout the site.
@mixin error-text{
  background-color:$red;
  color:$base03;
  font-weight:bold;
  padding:.15em;
}

/*responsive image
/*used in conjunction with .two-column-flex. I thought I would use this more often than I did.
/*this is applied first to a figure tags, or other image containers.*/
@mixin resposive-img(){
  @include margin-padding();
  /*the image container should shrink more than any text in a flex container.*/
  flex-shrink:2; 
  flex-grow:1;

  /*better than 33.3333(etc.). Container will be 1/3 of it's parent.*/
  flex-basis:calc(100%/3); 
  
  //Blank line to mentally separate the flex-item properties from flex container properties.
  /*prepares container for holding `img` and `figcaption`*/
  display:flex;
  flex-direction:column;
  align-items: center;
  justify-content: space-around;
  img{
    height:auto;
    /*This prevents image from shrinkinginto oblivion */
    min-width:150px;
    /*responsive to container size*/
    width:100%;
    /*stops image becoming indefinately large*/
    max-width:275px;
    /*allows image to be a reasonable size when it occupies it's own line*/
    flex-grow:1;
    // flex-shrink:2;
    /*shrink image to fit container. Or do nothing if it is already small enough to fit.*/
    object-fit: contain;
  }
}